#  NOTE(koekeishiya): A list of all built-in modifier and literal keywords can
#                     be found at https://github.com/koekeishiya/skhd/issues/1
#
#                     A hotkey is written according to the following rules:
#
#                       hotkey   = <mode> '<' <action> | <action>
#
#                       mode     = 'name of mode' | <mode> ',' <mode>
#
#                       action   = <keysym> ':' <command> | <keysym> '->' ':' <command>
#                                  <keysym> ';' <mode>    | <keysym> '->' ';' <mode>
#
#                       keysym   = <mod> '-' <key> | <key>
#
#                       mod      = 'built-in mod keyword' | <mod> '+' <mod>
#
#                       key      = <literal> | <keycode>
#
#                       literal  = 'single letter or built-in keyword'
#
#                       keycode  = 'apple keyboard kVK_<Key> values (0x3C)'
#
#                       ->       = keypress is not consumed by skhd
#
#                       command  = command is executed through '$SHELL -c' and
#                                  follows valid shell syntax. if the $SHELL environment
#                                  variable is not set, it will default to '/bin/bash'.
#                                  when bash is used, the ';' delimeter can be specified
#                                  to chain commands.
#
#                                  to allow a command to extend into multiple lines,
#                                  prepend '\' at the end of the previous line.
#
#                                  an EOL character signifies the end of the bind.
#
#
#  NOTE(koekeishiya): A mode is declared according to the following rules:
#
#                       mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#                                   '::' <name> '@'               | '::' <name>
#
#                       name      = desired name for this mode,
#
#                       @         = capture keypresses regardless of being bound to an action
#
#                       command  = command is executed through '$SHELL -c' and
#                                  follows valid shell syntax. if the $SHELL environment
#                                  variable is not set, it will default to '/bin/bash'.
#                                  when bash is used, the ';' delimeter can be specified
#                                  to chain commands.
#
#                                  to allow a command to extend into multiple lines,
#                                  prepend '\' at the end of the previous line.
#
#                                  an EOL character signifies the end of the bind.

# add an on_enter command to the default mode
:: default : chunkc border::color 0xff0f6288

# defines a new mode 'resize' with an on_enter command, that captures keypresses
:: resize @ : chunkc border::color 0xff24ccaa

# from 'default' mode, activate mode 'resize'
# (this is the key combination you want to use to enter resize mode)
ctrl - r ; resize

# from 'resize' mode, activate mode 'default'
# (this is the keypress required to leave resize mode)
resize < escape ; default

# resize window in different directions
# (i'm using hjkl but you could just as easily use arrow keys, wasd, etc.)
resize < h : chunkc tiling::window --use-temporary-ratio 0.05 --adjust-window-edge west; chunkc tiling::window --use-temporary-ratio -0.05 --adjust-window-edge east;
resize < j : chunkc tiling::window --use-temporary-ratio 0.05 --adjust-window-edge south; chunkc tiling::window --use-temporary-ratio -0.05 --adjust-window-edge north;
resize < k : chunkc tiling::window --use-temporary-ratio 0.05 --adjust-window-edge north; chunkc tiling::window --use-temporary-ratio -0.05 --adjust-window-edge south;
resize < l : chunkc tiling::window --use-temporary-ratio 0.05 --adjust-window-edge east; chunkc tiling::window --use-temporary-ratio -0.05 --adjust-window-edge west;
#
# defines a new mode 'test' with an on_enter command, that captures keypresses
# :: test @ : chunkc border::color 0xff24ccaa
#
# from 'default' mode, activate mode 'test'
# cmd - x ; test
#
# from 'test' mode, activate mode 'default'
# test < cmd - x ; default
#
# launch a new terminal instance when in either 'default' or 'test' mode
# default, test < cmd - return : open -na /Applications/Terminal.app

# toggle fullscreen mode for the focused container
alt - f : chunkc tiling::window --toggle fullscreen
shift + alt - f : chunkc tiling::window --toggle native-fullscreen

# change focus between tiling / floating windows
shift + alt - space : chunkc tiling::window --toggle float

# change layout of desktop
alt - b : chunkc tiling::desktop --layout bsp
alt - m : chunkc tiling::desktop --layout monocle
alt - t : chunkc tiling::desktop --layout float

# kill focused window
shift + alt - q : chunkc tiling::window --close

# change focus
alt - h : chunkc tiling::window --focus west
alt - j : chunkc tiling::window --focus south
alt - k : chunkc tiling::window --focus north
alt - l : chunkc tiling::window --focus east
alt - p : chunkc tiling::window --focus prev
alt - n : chunkc tiling::window --focus next

# move focused window
shift + alt - h : chunkc tiling::window --warp west
shift + alt - j : chunkc tiling::window --warp south
shift + alt - k : chunkc tiling::window --warp north
shift + alt - l : chunkc tiling::window --warp east

alt - r : chunkc tiling::desktop --rotate 90

# move focused container to workspace
shift + alt - p : chunkc tiling::window --send-to-desktop prev
shift + alt - n : chunkc tiling::window --send-to-desktop next
shift + alt - 1 : chunkc tiling::window --send-to-desktop 1
shift + alt - 2 : chunkc tiling::window --send-to-desktop 2
shift + alt - 3 : chunkc tiling::window --send-to-desktop 3
shift + alt - 4 : chunkc tiling::window --send-to-desktop 4
shift + alt - 5 : chunkc tiling::window --send-to-desktop 5
shift + alt - 6 : chunkc tiling::window --send-to-desktop 6
shift + alt - 7 : chunkc tiling::window --send-to-desktop 7

# move focus to desktop
alt - 1 : chunkc tiling:desktop --focus 1
alt - 2 : chunkc tiling:desktop --focus 2
alt - 3 : chunkc tiling:desktop --focus 3
alt - 4 : chunkc tiling:desktop --focus 4
alt - 5 : chunkc tiling:desktop --focus 5
alt - 6 : chunkc tiling:desktop --focus 6
alt - 7 : chunkc tiling:desktop --focus 7
alt - 8 : chunkc tiling:desktop --focus 8
alt - 9 : chunkc tiling:desktop --focus 9
alt - 0 : chunkc tiling:desktop --focus 10
